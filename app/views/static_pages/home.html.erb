<%= render 'home' %>

<script>
$(function(){

  // initialize drag and drop elements with Jquery plugin //
  $('.draggable').draggable({
    snap: ".droppable",
    snapTolerance: 10,
    // revert pieces to original position if not valid move //
    stop: function(event, ui) {
      var piece = $(this);
      var pieceStyle = $(this).css('top');
      if (pieceStyle !== '0px') {
        piece.animate({
          top: 0,
          left: 0,
        }, 500);
      }
    },
    start: function(event, ui) {
      var startingPoint = $(this).closest('div').attr('id');
      var startingPosition = $(this).closest('div');
      var pieceType = $(this).attr('class');
      var letterVar = startingPoint[4];
      var numberVar = startingPoint[5];
      var letterArray = ["a", "b", "c", "d", "e", "f", "g", "h"];
      var yAxis = parseInt(startingPoint[5]);
      var xAxis = letterArray.indexOf(letterVar) + 1;

      function resetVars(yAxis, xAxis) {
        yAxis = parseInt(startingPoint[5]);
        xAxis = letterArray.indexOf(letterVar) + 1;
      }

       function enableElements(entry) {
         $('.chess-holder').children('div[class*=col]').children('div[id*='+ entry +']').droppable('enable');
       }

      // set forward movement for pawns //
      if (pieceType.match(/glyphicon-pawn black/)) {
        $('.droppable').droppable("disable");
        $(this).parent().next().droppable('enable');

      }
      else if (pieceType.match(/glyphicon-pawn white/)) {
        $('.droppable').droppable("disable");
        $(this).parent().prev().droppable('enable');
      }

      // set vertical and horizontal movement for rooks //
      else if (pieceType.match(/glyphicon-tower black/)) {
        $('.droppable').droppable("disable");
        resetVars(yAxis, xAxis);
         var divArray = [];
         while (yAxis <= 8 ) {
          pushElementToArray(divArray, xAxis, yAxis);

           function checkForBlockingWhite(xAxis, yAxis) {
             $('.col-md-1').children('div[id*='+ letterArray[xAxis-1] + yAxis+']').children('span[class*=white]').length !== 0;
           };

           function checkForBlockingBlack(xAxis, yAxis) {
             $('.col-md-1').children('div[id*=' + letterArray[xAxis-1] + yAxis+']').children('span[class*=black]').length !== 0;
           }
           function pushElementToArray(array, xAxis, yAxis) {
             array.push(letterArray[xAxis - 1] + yAxis);
           }

          if (checkForBlockingWhite(xAxis, yAxis)) { break;}
           yAxis += 1;
          if (checkForBlockingBlack(xAxis, yAxis)) { break;}
         }
         // set -y vertical for black rook //

         resetVars(yAxis, xAxis);
         while (yAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingWhite(xAxis, yAixs)) { break;};
           yAxis -= 1;
          if (checkForBlockingBlack(xAxis, yAxis)) { break;};
         }

         // set + x horizontal for black rook //
         resetVars(yAxis, xAxis);
         while (xAxis <= 8 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingWhite(xAxis, yAixs)) { break;};
           xAxis += 1;
           if (checkForBlockingBlack(xAxis, yAxis)) { break;};
         }

         // set - x horizontal for black rook //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingWhite(xAxis, yAixs)) { break;};
           xAxis -= 1;
           if (checkForBlockingBlack(xAxis, yAxis)) { break;};
         }
         divArray.forEach(enableElements);

      }
      else if (pieceType.match(/glyphicon-tower white/)) {
        $('.droppable').droppable("disable");

        // set +y vertical for black rook //
        resetVars(yAxis, xAxis);
         var divArray = [];
         while (yAxis <= 8 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingBlack(xAxis, yAixs)) { break;};
           yAxis += 1;
           if (checkForBlockingWhite(xAxis, yAxis)) { break;};
         }

         // set -y vertical for black rook //
         resetVars(yAxis, xAxis);
         while (yAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingBlack(xAxis, yAixs)) { break;};
           yAxis -= 1;
           if (checkForBlockingWhite(xAxis, yAxis)) { break;};
         }

         // set + x horizontal for black rook //
         resetVars(yAxis, xAxis);
         while (xAxis <= 8 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingBlack(xAxis, yAixs)) { break;};
           xAxis += 1;
           if (checkForBlockingWhite(xAxis, yAxis)) { break;};
         }

         // set - x horizontal for black rook //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingBlack(xAxis, yAixs)) { break;};
           xAxis -= 1;
           if (checkForBlockingWhite(xAxis, yAxis)) { break;};
         }
         divArray.forEach(enableElements);
      }

      // set diagonal movement for black bishop //
      else if (pieceType.match(/glyphicon-bishop black/)) {
        $('.droppable').droppable("disable");

        // set +x+y diagonal //
        resetVars(yAxis, xAxis);
         var divArray = [];
         while (xAxis <= 8 && yAxis <= 8 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingWhite(xAxis, yAixs)) { break;};
           xAxis += 1;
           yAxis += 1;
           if (checkForBlockingBlack(xAxis, yAxis)) { break;};
         }

         // set -x-y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 && yAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingWhite(xAxis, yAixs)) { break;};
           xAxis -= 1;
           yAxis -= 1;
           if (checkForBlockingBlack(xAxis, yAxis)) { break;};
         }

         // set +x-y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis <= 8 && yAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingWhite(xAxis, yAixs)) { break;};
           xAxis += 1;
           yAxis -= 1;
           if (checkForBlockingBlack(xAxis, yAxis)) { break;};
         }

         // set -x+y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 && yAxis <= 8) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingWhite(xAxis, yAixs)) { break;};
          xAxis -= 1;
          yAxis += 1;
          if (checkForBlockingBlack(xAxis, yAxis)) { break;};
         }
         divArray.forEach(enableElements);
       }

      // set diagonal movement for white bishop //
      else if (pieceType.match(/glyphicon-bishop white/)) {
        $('.droppable').droppable("disable");

        // set +x+y diagonal //
        resetVars(yAxis, xAxis);
         var divArray = [];
         while (xAxis <= 8 && yAxis <= 8 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingBlack(xAxis, yAixs)) { break;};
           xAxis += 1;
           yAxis += 1;
           if (checkForBlockingWhite(xAxis, yAxis)) { break;};
         }

         // set -x-y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 && yAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingBlack(xAxis, yAixs)) { break;};
           xAxis -= 1;
           yAxis -= 1;
           if (checkForBlockingWhite(xAxis, yAixs)) { break;};
         }

         // set +x-y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis <= 8 && yAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingBlack(xAxis, yAixs)) { break;};
           xAxis += 1;
           yAxis -= 1;
           if (checkForBlockingWhite(xAxis, yAixs)) { break;};
         }

         // set -x+y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 && yAxis <= 8) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingBlack(xAxis, yAixs)) { break;};
           xAxis -= 1;
           yAxis += 1;
           if (checkForBlockingWhite(xAxis, yAixs)) { break;};
         }
         divArray.forEach(enableElements);
       }

      // set movement for knights //
      else if (pieceType.match(/glyphicon-knight/)) {
        $('.droppable').droppable("disable");
        resetVars(yAxis, xAxis);

        var divArray = [];

        divArray.push(letterArray[xAxis -2] + (yAxis-2));
        divArray.push(letterArray[xAxis -2] + (yAxis+2));
        divArray.push(letterArray[xAxis -3] + (yAxis-1));
        divArray.push(letterArray[xAxis -3] + (yAxis+1));
        divArray.push(letterArray[xAxis] + (yAxis+2));
        divArray.push(letterArray[xAxis] + (yAxis-2));
        divArray.push(letterArray[xAxis +1] + (yAxis+1));
        divArray.push(letterArray[xAxis +1] + (yAxis-1));

        divArray.forEach(enableElements);
      }

      // set movements for white queen //
      else if (pieceType.match(/glyphicon-queen white/)) {
        $('.droppable').droppable("disable");

        // set +x+y diagonal //
        resetVars(yAxis, xAxis);
         var divArray = [];
         while (xAxis <= 8 && yAxis <= 8 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingWhite(xAxis, yAxis)) {break;};
           xAxis += 1;
           yAxis += 1;
           if (checkForBlockingBlack(xAxis, yAxis)) {break;};
         }

         // set -x-y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 && yAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingWhite(xAxis, yAxis)) {break;};
           xAxis -= 1;
           yAxis -= 1;
           if (checkForBlockingBlack(xAxis, yAxis)) {break;};
         }

         // set +x-y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis <= 8 && yAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingWhite(xAxis, yAxis)) {break;};
           xAxis += 1;
           yAxis -= 1;
           if (checkForBlockingBlack(xAxis, yAxis)) {break;};
         }
        //  divArray.forEach(enableElements);
         // set -x+y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 && yAxis <= 8) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingWhite(xAxis, yAxis)) {break;};
           xAxis -= 1;
           yAxis += 1;
          if (checkForBlockingBlack(xAxis, yAxis)) {break;};

         }

         // set y+ vertical for white queen //
         resetVars(yAxis, xAxis);
         while (yAxis <= 8) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingWhite(xAxis, yAxis)) {break;};
           yAxis += 1;
          if (checkForBlockingBlack(xAxis, yAxis)) {break;};
         }

         // set y- vertical for white queen //

         while (yAxis >= 1) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingWhite(xAxis, yAxis)) {break;};
           yAxis -= 1;
          if (checkForBlockingBlack(xAxis, yAxis)) {break;};
         }

         // set x+ horizontal for white queen  //
         resetVars(yAxis, xAxis);
         while (xAxis <= 8 ) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingWhite(xAxis, yAxis)) {break;};
           xAxis += 1;
          if (checkForBlockingBlack(xAxis, yAxis)) {break;};
         }

         // set x- horizontal for white Queen //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 ) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingWhite(xAxis, yAxis)) {break;};
           xAxis -= 1;
          if (checkForBlockingBlack(xAxis, yAxis)) {break;};
         }
         divArray.forEach(enableElements);
      }

      // set movements for black queen //
      else if (pieceType.match(/glyphicon-queen black/)) {
        $('.droppable').droppable("disable");

        // set +x+y diagonal //
        resetVars(yAxis, xAxis);
         var divArray = [];
         while (xAxis <= 8 && yAxis <= 8 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingBlack(xAxis, yAxis)) {break;};
           xAxis += 1;
           yAxis += 1;
           if (checkForBlockingWhite(xAxis, yAxis)) {break;};
         }

         // set -x-y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 && yAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingBlack(xAxis, yAxis)) {break;};
           xAxis -= 1;
           yAxis -= 1;
           if (checkForBlockingWhite(xAxis, yAxis)) {break;};
         }

         // set +x-y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis <= 8 && yAxis >= 1 ) {
           pushElementToArray(divArray, xAxis, yAxis);
           if (checkForBlockingBlack(xAxis, yAxis)) {break;};
           xAxis += 1;
           yAxis -= 1;
           if (checkForBlockingWhite(xAxis, yAxis)) {break;};
         }

         // set -x+y diagonal //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 && yAxis <= 8) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingBlack(xAxis, yAxis)) {break;};
           xAxis -= 1;
           yAxis += 1;
          if (checkForBlockingWhite(xAxis, yAxis)) {break;};
         }

         // set x+ horizontal //
         resetVars(yAxis, xAxis);
         while (xAxis <= 8) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingBlack(xAxis, yAxis)) {break;};
           xAxis += 1;
          if (checkForBlockingWhite(xAxis, yAxis)) {break;};
         }

         // set x- horizontal for Queen //
         resetVars(yAxis, xAxis);
         while (xAxis >= 1 ) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingBlack(xAxis, yAxis)) {break;};
           xAxis -= 1;
          if (checkForBlockingWhite(xAxis, yAxis)) {break;};
         }

         // set y+ vertical for Queen //
         resetVars(yAxis, xAxis);
         while ( yAxis <= 8) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingBlack(xAxis, yAxis)) {break;};
           yAxis += 1;
          if (checkForBlockingWhite(xAxis, yAxis)) {break;};
         }

         // set y- vertical for Queen //
         resetVars(yAxis, xAxis);
         while ( yAxis >= 1) {
          pushElementToArray(divArray, xAxis, yAxis);
          if (checkForBlockingBlack(xAxis, yAxis)) {break;};
           yAxis -= 1;
          if (checkForBlockingWhite(xAxis, yAxis)) {break;};
         }

         divArray.forEach(enableElements);
      }

      else if (pieceType.match(/glyphicon-king/)) {
        $('.droppable').droppable("disable");

        // set +x+y diagonal //
        resetVars(yAxis, xAxis);

        var divArray = [];
        console.log(xAxis);
        console.log(yAxis);
        divArray.push(letterArray[xAxis -1] + (yAxis + 1));
        divArray.push(letterArray[xAxis -1] + (yAxis - 1));
        divArray.push(letterArray[xAxis -2] + (yAxis));
        divArray.push(letterArray[xAxis] + (yAxis));
        divArray.push(letterArray[xAxis -2] + (yAxis + 1));
        divArray.push(letterArray[xAxis -2] + (yAxis - 1));
        divArray.push(letterArray[xAxis] + (yAxis + 1));
        divArray.push(letterArray[xAxis] + (yAxis - 1));

        divArray.forEach(enableElements);
      }

      // disable opponent side during turns //
      if (pieceType.match(/white/) !== null) {
        $('.white').parent().droppable("disable");
      }
      else if (pieceType.match(/black/) !== null) {
        $('.black').parent().droppable("disable");
      }
    }
  });

  $('.black').draggable('disable');

// disable opponent pieces when player's turn //
  $('.droppable').droppable({
    revert: "invalid",
    drop: function(event, ui) {
      var newBox = $(this).attr('id');
      var stationBox = $(this);
      var piece = ui.draggable.attr('class');
      var oldBox = ui.draggable.parent().attr('id');
      var classCheck = stationBox.children().attr('class');

      if (stationBox.children().length > 0 && piece.match(/white/) !== null) {
        stationBox.children().detach().appendTo('.black-pieces');
      }
      else if (stationBox.children().length > 0 && piece.match(/black/) !== null) {
        stationBox.children().detach().appendTo('.white-pieces');
      }

      ui.draggable.detach().appendTo($(this)).css({'top': '0', 'left': '0'});

      var newHome = ui.draggable.parent().attr('id');

      var boolTest = $('.white').draggable("option", "disabled");
      if (boolTest === false) {
        $('.white').draggable('disable');
        $('.black').draggable('enable');
      }
      else {
        $('.white').draggable('enable');
        $('.black').draggable('disable');
      }
    }
  });

});
</script>
